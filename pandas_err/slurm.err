/home/apenn2/.local/lib/python3.9/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/apenn2/.local/lib/python3.9/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/connectors/logger_connector/logger_connector.py:75: Starting from v1.9.0, `tensorboardX` has been removed as a dependency of the `pytorch_lightning` package, due to potential conflicts with other packages in the ML ecosystem. For this reason, `logger=True` will use `CSVLogger` as the default logger, unless the `tensorboard` or `tensorboardX` packages are found. Please `pip install lightning[extra]` or one of them to enable TensorBoard support by default
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]

  | Name       | Type              | Params
-------------------------------------------------
0 | base_model | DenseNet          | 7.0 M 
1 | criterion  | BCEWithLogitsLoss | 0     
-------------------------------------------------
7.0 M     Trainable params
0         Non-trainable params
7.0 M     Total params
27.820    Total estimated model params size (MB)
SLURM auto-requeueing enabled. Setting signal handlers.
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/home/apenn2/.local/lib/python3.9/site-packages/torch/autograd/graph.py:744: UserWarning: Plan failed with a cudnnException: CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnFinalize Descriptor Failed cudnn_status: CUDNN_STATUS_NOT_SUPPORTED (Triggered internally at ../aten/src/ATen/native/cudnn/Conv_v8.cpp:919.)
  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/home/apenn2/.local/lib/python3.9/site-packages/torch/nn/modules/conv.py:456: UserWarning: Plan failed with a cudnnException: CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnFinalize Descriptor Failed cudnn_status: CUDNN_STATUS_NOT_SUPPORTED (Triggered internally at ../aten/src/ATen/native/cudnn/Conv_v8.cpp:919.)
  return F.conv2d(input, weight, bias, self.stride,
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
/central/home/apenn2/repo/CS156b/train_dataset.py:35: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  y_label = torch.tensor(self.annotations.iloc[index, 7:])
`Trainer.fit` stopped: `max_epochs=3` reached.
Traceback (most recent call last):
  File "/central/home/apenn2/repo/CS156b/train_specific_pathology.py", line 77, in <module>
    trainer.fit(model, train_dataloaders=train_loader, val_dataloaders=val_loader)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 544, in fit
    call._call_and_handle_interrupt(
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 44, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 580, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 987, in _run
    results = self._run_stage()
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/trainer.py", line 1033, in _run_stage
    self.fit_loop.run()
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/loops/fit_loop.py", line 211, in run
    self.on_run_end()
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/loops/fit_loop.py", line 406, in on_run_end
    call._call_lightning_module_hook(trainer, "on_train_end")
  File "/home/apenn2/.local/lib/python3.9/site-packages/pytorch_lightning/trainer/call.py", line 157, in _call_lightning_module_hook
    output = fn(*args, **kwargs)
  File "/central/home/apenn2/repo/CS156b/models/DenseNet.py", line 79, in on_train_end
    data = pd.DataFrame({
  File "/home/apenn2/.local/lib/python3.9/site-packages/pandas/core/frame.py", line 778, in __init__
    mgr = dict_to_mgr(data, index, columns, dtype=dtype, copy=copy, typ=manager)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pandas/core/internals/construction.py", line 503, in dict_to_mgr
    return arrays_to_mgr(arrays, columns, index, dtype=dtype, typ=typ, consolidate=copy)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pandas/core/internals/construction.py", line 114, in arrays_to_mgr
    index = _extract_index(arrays)
  File "/home/apenn2/.local/lib/python3.9/site-packages/pandas/core/internals/construction.py", line 677, in _extract_index
    raise ValueError("All arrays must be of the same length")
ValueError: All arrays must be of the same length
